# ===================================================================
# JHipster Sample Spring Cloud Config.
# ===================================================================

# Property used on app startup to check the config server status
configserver:
    name: JHipster Registry config server
    status: Connected to the JHipster Registry config server!
eureka:
    client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
        service-url:
            defaultZone: http://admin:${spring.security.user.password}@jhipster-registry-0.c2b413d727eaa40478af95cbdfd098016.svc.cluster.local:8761/eureka/,http://admin:${spring.security.user.password}@jhipster-registry-1.c2b413d727eaa40478af95cbdfd098016.svc.cluster.local:8761/eureka/
    instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0

# Default JWT secret token (to be changed in production!)
jhipster:
    security:
        authentication:
            jwt:
                # It is recommended to encrypt the secret key in Base64, using the `base64-secret` property.
                # For compabitibily issues with applications generated with older JHipster releases,
                # we use the non Base64-encoded `secret` property here.
                # secret: my-secret-key-which-should-be-changed-in-production-and-be-base64-encoded
                # The `base64-secret` property is recommended if you use JHipster v5.3.0+
                # (you can type `echo 'secret-key'|base64` on your command line)
                base64-secret: ZDA2NDQ5ZDIwN2NjMTI4NWQ2YzdjMmIwZDM3OTJmYzY4MTI2M2Q2OGViZWJlMDkxN2ZmMzlmMTM1MTc3YjlkZjRmNzFhZDVmYWZmYTkyMDNlY2Q0ODVlOGRjYTYzNWFlNDBmZDY1ZmJmZDdjMmVkOWQ1OTg1MjE1ZTc3NThkM2Y=

# Enable /management/logfile endpoint for all apps
logging:
    path: /tmp
    file: ${spring.application.name}.log
